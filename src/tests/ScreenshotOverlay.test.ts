/**
 * „Çπ„ÇØ„É™„Éº„É≥„Ç∑„Éß„ÉÉ„Éà„Ç™„Éº„Éê„Éº„É¨„Ç§Ê©üËÉΩ„ÉÜ„Çπ„Éà (Task 6)
 */
import { jest } from '@jest/globals';

// „É¢„ÉÉ„ÇØÁî®„ÅÆÂûãÂÆöÁæ©
interface MockContext {
    drawImage: jest.Mock;
    fillText: jest.Mock;
    strokeText: jest.Mock;
    measureText: jest.Mock<{ width: number }>;
    fillRect: jest.Mock;
    strokeRect: jest.Mock;
    beginPath: jest.Mock;
    moveTo: jest.Mock;
    lineTo: jest.Mock;
    quadraticCurveTo: jest.Mock;
    closePath: jest.Mock;
    fill: jest.Mock;
    stroke: jest.Mock;
    save: jest.Mock;
    restore: jest.Mock;
    setTransform: jest.Mock;
    translate: jest.Mock;
    rotate: jest.Mock;
    scale: jest.Mock;
    clip: jest.Mock;
    font: string;
    fillStyle: string;
    strokeStyle: string;
    lineWidth: number;
    textAlign: string;
    textBaseline: string;
    shadowColor: string;
    shadowBlur: number;
    shadowOffsetX: number;
    shadowOffsetY: number;
    imageSmoothingEnabled: boolean;
    imageSmoothingQuality: string;
    textRenderingOptimization: string;
}

interface MockCanvas {
    width: number;
    height: number;
    getContext: jest.Mock<MockContext>;
    remove: jest.Mock;
}

interface MockGameEngine {
    canvas: MockCanvas;
}

interface ScoreData {
    score: number;
    combo?: number;
    accuracy?: number;
    stage?: string;
}

interface AchievementData {
    name: string;
    description?: string;
    rarity?: string;
}

interface CustomElement {
    type: string;
    text?: string;
    position: { x: number; y: number };
    style?: {
        fontSize?: number;
        textColor?: string;
    };
}

interface OverlayData {
    elements: CustomElement[];
}

interface OverlayOptions {
    score?: {
        fontSize?: number;
        textColor?: string;
        backgroundColor?: string;
    };
}

interface OverlayStats {
    overlaysCreated: number;
    errors: number;
    successRate: number;
    averageTimeMs: number;
}

interface ResponsiveConfig {
    score: {
        fontSize: number;
    };
    logo: {
        fontSize: number;
    };
    layout: {
        scorePosition: string;
        logoPosition?: string;
    };
}

interface PresetConfig {
    logo?: {
        enabled: boolean;
        textColor?: string;
    };
    watermark?: {
        enabled: boolean;
    };
    score?: {
        borderWidth?: number;
        backgroundColor?: string;
        fontSize?: number;
    };
}

interface ScreenshotOverlay {
    gameEngine: MockGameEngine;
    config: any;
    stats: any;
    cache: {
        fonts: Map<string, any>;
        images: Map<string, any>;
    };
    createScoreOverlay: (canvas: MockCanvas, scoreData: ScoreData | null, options?: OverlayOptions) => Promise<any>;
    createAchievementOverlay: (canvas: MockCanvas, achievementData: AchievementData | null) => Promise<any>;
    createCustomOverlay: (canvas: MockCanvas, overlayData: OverlayData) => Promise<any>;
    calculatePosition: (position: string | { x: number; y: number }, width: number, height: number, canvasWidth: number, canvasHeight: number, padding: number) => { x: number; y: number };
    wrapText: (context: MockContext, text: string, maxWidth: number) => string[];
    formatNumber: (num: number) => string;
    getResponsiveConfig: (width: number, height: number) => ResponsiveConfig;
    getPresetConfig: (preset: string) => PresetConfig;
    updateConfig: (newConfig: any) => void;
    clearCache: () => void;
    getStats: () => OverlayStats;
}

describe('ScreenshotOverlay', () => {
    let screenshotOverlay: ScreenshotOverlay;
    let mockGameEngine: MockGameEngine;
    let mockCanvas: MockCanvas;
    let mockContext: MockContext;

    beforeEach(async () => {
        // Canvas Context API„ÅÆ„É¢„ÉÉ„ÇØ
        mockContext = {
            drawImage: jest.fn(),
            fillText: jest.fn(),
            strokeText: jest.fn(),
            measureText: jest.fn<{ width: number }>().mockReturnValue({ width: 100 }),
            fillRect: jest.fn(),
            strokeRect: jest.fn(),
            beginPath: jest.fn(),
            moveTo: jest.fn(),
            lineTo: jest.fn(),
            quadraticCurveTo: jest.fn(),
            closePath: jest.fn(),
            fill: jest.fn(),
            stroke: jest.fn(),
            save: jest.fn(),
            restore: jest.fn(),
            setTransform: jest.fn(),
            translate: jest.fn(),
            rotate: jest.fn(),
            scale: jest.fn(),
            clip: jest.fn(),
            font: '16px Arial',
            fillStyle: '#000000',
            strokeStyle: '#000000',
            lineWidth: 1,
            textAlign: 'left',
            textBaseline: 'top',
            shadowColor: 'transparent',
            shadowBlur: 0,
            shadowOffsetX: 0,
            shadowOffsetY: 0,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high',
            textRenderingOptimization: 'optimizeQuality'
        };
        
        // Canvas API„ÅÆ„É¢„ÉÉ„ÇØ
        mockCanvas = {
            width: 800,
            height: 600,
            getContext: jest.fn<MockContext>().mockReturnValue(mockContext),
            remove: jest.fn()
        };

        // document.createElement „ÅÆ„É¢„ÉÉ„ÇØ
        document.createElement = jest.fn().mockImplementation((tagName: string) => {
            if (tagName === 'canvas') {
                return { ...mockCanvas };
            }
            return {};
        });

        // GameEngine„ÅÆ„É¢„ÉÉ„ÇØ
        mockGameEngine = { canvas: mockCanvas };

        const { ScreenshotOverlay } = await import('../core/ScreenshotOverlay.ts');
        screenshotOverlay = new ScreenshotOverlay(mockGameEngine);
    });

    afterEach(() => {
        jest.clearAllMocks();
    });

    describe('ÂàùÊúüÂåñ', () => {
        test('Ê≠£Â∏∏„Å´ÂàùÊúüÂåñ„Åï„Çå„Çã', () => {
            expect(screenshotOverlay.gameEngine).toBe(mockGameEngine);
            expect(screenshotOverlay.config).toBeDefined();
            expect(screenshotOverlay.stats).toBeDefined();
            expect(screenshotOverlay.cache).toBeDefined();
        });

        test('„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„ÅåÊ≠£„Åó„ÅèË®≠ÂÆö„Åï„Çå„Çã', () => {
            expect(screenshotOverlay.config.layout.scorePosition).toBe('top-right');
            expect(screenshotOverlay.config.score.enabled).toBe(true);
            expect(screenshotOverlay.config.logo.enabled).toBe(true);
            expect(screenshotOverlay.config.watermark.enabled).toBe(true);
        });
    });

    describe('„Çπ„Ç≥„Ç¢„Ç™„Éº„Éê„Éº„É¨„Ç§', () => {
        test('Âü∫Êú¨ÁöÑ„Å™„Çπ„Ç≥„Ç¢„Ç™„Éº„Éê„Éº„É¨„Ç§„Åå‰ΩúÊàê„Åï„Çå„Çã', async () => {
            const scoreData: ScoreData = {
                score: 1500,
                combo: 10,
                accuracy: 0.85,
                stage: 'normal'
            };

            const result = await screenshotOverlay.createScoreOverlay(mockCanvas, scoreData);
            expect(result).toBeDefined();
            expect(result.width).toBe(800);
            expect(result.height).toBe(600);
            expect(mockContext.drawImage).toHaveBeenCalledWith(mockCanvas, 0, 0);
            expect(mockContext.fillText).toHaveBeenCalled();
        });

        test('„Çπ„Ç≥„Ç¢„ÅÆ„Åø„ÅÆÂ†¥Âêà„Åß„ÇÇÂãï‰Ωú„Åô„Çã', async () => {
            const scoreData: ScoreData = { score: 2000 };
            const result = await screenshotOverlay.createScoreOverlay(mockCanvas, scoreData);
            expect(result).toBeDefined();
            expect(mockContext.fillText).toHaveBeenCalled();
        });

        test('„Ç´„Çπ„Çø„É†Ë®≠ÂÆö„Åß„Ç™„Éº„Éê„Éº„É¨„Ç§„Åå‰ΩúÊàê„Åï„Çå„Çã', async () => {
            const scoreData: ScoreData = { score: 3000 };
            const options: OverlayOptions = {
                score: {
                    fontSize: 32,
                    textColor: '#FF0000',
                    backgroundColor: 'rgba(0, 0, 255, 0.8)'
                }
            };
            
            const result = await screenshotOverlay.createScoreOverlay(mockCanvas, scoreData, options);
            expect(result).toBeDefined();
            expect(mockContext.font).toContain('32px');
        });

        test('„É≠„Ç¥„Å®„Ç¶„Ç©„Éº„Çø„Éº„Éû„Éº„ÇØ„ÅåÊèèÁîª„Åï„Çå„Çã', async () => {
            const scoreData: ScoreData = { score: 1200 };
            await screenshotOverlay.createScoreOverlay(mockCanvas, scoreData);

            // „É≠„Ç¥„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊèèÁîªÁ¢∫Ë™ç
            expect(mockContext.fillText).toHaveBeenCalledWith('BubblePop', expect.any(Number), expect.any(Number));
            // „Ç¶„Ç©„Éº„Çø„Éº„Éû„Éº„ÇØ„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊèèÁîªÁ¢∫Ë™ç
            expect(mockContext.fillText).toHaveBeenCalledWith('play.bubblepop.game', expect.any(Number), expect.any(Number));
        });

        test('Áµ±Ë®à„ÅåÊ≠£„Åó„ÅèÊõ¥Êñ∞„Åï„Çå„Çã', async () => {
            const scoreData: ScoreData = { score: 1800 };
            await screenshotOverlay.createScoreOverlay(mockCanvas, scoreData);
            const stats = screenshotOverlay.getStats();
            expect(stats.overlaysCreated).toBe(1);
            expect(stats.averageTimeMs).toBeGreaterThan(0);
        });
    });

    describe('ÂÆüÁ∏æ„Ç™„Éº„Éê„Éº„É¨„Ç§', () => {
        test('Âü∫Êú¨ÁöÑ„Å™ÂÆüÁ∏æ„Ç™„Éº„Éê„Éº„É¨„Ç§„Åå‰ΩúÊàê„Åï„Çå„Çã', async () => {
            const achievementData: AchievementData = {
                name: '„Çπ„Ç≥„Ç¢„Éû„Çπ„Çø„Éº',
                description: 'Á¥ØË®à„Çπ„Ç≥„Ç¢10‰∏áÁÇπÈÅîÊàê',
                rarity: 'rare'
            };

            const result = await screenshotOverlay.createAchievementOverlay(mockCanvas, achievementData);
            expect(result).toBeDefined();
            expect(mockContext.fillText).toHaveBeenCalledWith('üèÜ ÂÆüÁ∏æËß£Èô§ÔºÅ', expect.any(Number), expect.any(Number));
            expect(mockContext.fillText).toHaveBeenCalledWith('„Çπ„Ç≥„Ç¢„Éû„Çπ„Çø„Éº', expect.any(Number), expect.any(Number));
        });

        test('Èï∑„ÅÑË™¨ÊòéÊñá„ÅåÊäò„ÇäËøî„Åï„Çå„Çã', async () => {
            const achievementData: AchievementData = {
                name: '„Ç®„Ç≠„Çπ„Éë„Éº„Éà',
                description: '„Åì„Çå„ÅØÈùûÂ∏∏„Å´Èï∑„ÅÑË™¨ÊòéÊñá„Åß„ÄÅË§áÊï∞Ë°å„Å´Êäò„ÇäËøî„Åï„Çå„Çã„Åì„Å®„ÇíÁ¢∫Ë™ç„Åô„Çã„Åü„ÇÅ„ÅÆ„ÉÜ„Çπ„Éà„Åß„Åô„ÄÇ'
            };

            const result = await screenshotOverlay.createAchievementOverlay(mockCanvas, achievementData);
            expect(result).toBeDefined();
            // fillText„ÅåË§áÊï∞ÂõûÂëº„Å∞„Çå„Çã„Åì„Å®„ÅßÊäò„ÇäËøî„Åó„ÇíÁ¢∫Ë™ç
            expect(mockContext.fillText.mock.calls.length).toBeGreaterThan(3);
        });

        test('Ë™¨Êòé„Å™„Åó„ÅÆÂÆüÁ∏æ„Åß„ÇÇÂãï‰Ωú„Åô„Çã', async () => {
            const achievementData: AchievementData = { name: '„Ç∑„É≥„Éó„É´ÂÆüÁ∏æ' };
            const result = await screenshotOverlay.createAchievementOverlay(mockCanvas, achievementData);
            expect(result).toBeDefined();
            expect(mockContext.fillText).toHaveBeenCalledWith('„Ç∑„É≥„Éó„É´ÂÆüÁ∏æ', expect.any(Number), expect.any(Number));
        });
    });

    describe('„Ç´„Çπ„Çø„É†„Ç™„Éº„Éê„Éº„É¨„Ç§', () => {
        test('„Ç´„Çπ„Çø„É†Ë¶ÅÁ¥†„ÅåÊèèÁîª„Åï„Çå„Çã', async () => {
            const overlayData: OverlayData = {
                elements: [{
                    type: 'text',
                    text: '„Ç´„Çπ„Çø„É†„ÉÜ„Ç≠„Çπ„Éà',
                    position: { x: 100, y: 100 },
                    style: {
                        fontSize: 24,
                        textColor: '#00FF00'
                    }
                }]
            };
            
            const result = await screenshotOverlay.createCustomOverlay(mockCanvas, overlayData);
            expect(result).toBeDefined();
            expect(mockContext.fillText).toHaveBeenCalledWith('„Ç´„Çπ„Çø„É†„ÉÜ„Ç≠„Çπ„Éà', expect.any(Number), expect.any(Number));
        });

        test('Ë§áÊï∞„ÅÆË¶ÅÁ¥†„ÅåÊèèÁîª„Åï„Çå„Çã', async () => {
            const overlayData: OverlayData = {
                elements: [
                    { type: 'text', text: '„ÉÜ„Ç≠„Çπ„Éà1', position: { x: 50, y: 50 } },
                    { type: 'text', text: '„ÉÜ„Ç≠„Çπ„Éà2', position: { x: 150, y: 150 } }
                ]
            };
            
            const result = await screenshotOverlay.createCustomOverlay(mockCanvas, overlayData);
            expect(result).toBeDefined();
            expect(mockContext.fillText).toHaveBeenCalledWith('„ÉÜ„Ç≠„Çπ„Éà1', expect.any(Number), expect.any(Number));
            expect(mockContext.fillText).toHaveBeenCalledWith('„ÉÜ„Ç≠„Çπ„Éà2', expect.any(Number), expect.any(Number));
        });

        test('Ë¶ÅÁ¥†„Å™„Åó„Åß„ÇÇÂü∫Êú¨„Ç™„Éº„Éê„Éº„É¨„Ç§„ÅåÂãï‰Ωú„Åô„Çã', async () => {
            const overlayData: OverlayData = { elements: [] };
            const result = await screenshotOverlay.createCustomOverlay(mockCanvas, overlayData);
            expect(result).toBeDefined();
            // „É≠„Ç¥„Å®„Ç¶„Ç©„Éº„Çø„Éº„Éû„Éº„ÇØ„ÅØÊèèÁîª„Åï„Çå„Çã
            expect(mockContext.fillText).toHaveBeenCalled();
        });
    });

    describe('‰ΩçÁΩÆË®àÁÆó', () => {
        test('top-left‰ΩçÁΩÆ„ÅåÊ≠£„Åó„ÅèË®àÁÆó„Åï„Çå„Çã', () => {
            const position = screenshotOverlay.calculatePosition('top-left', 100, 50, 800, 600, 20);
            expect(position.x).toBe(20);
            expect(position.y).toBe(20);
        });

        test('bottom-right‰ΩçÁΩÆ„ÅåÊ≠£„Åó„ÅèË®àÁÆó„Åï„Çå„Çã', () => {
            const position = screenshotOverlay.calculatePosition('bottom-right', 100, 50, 800, 600, 20);
            expect(position.x).toBe(680); // 800 - 100 - 20
            expect(position.y).toBe(530); // 600 - 50 - 20
        });

        test('center‰ΩçÁΩÆ„ÅåÊ≠£„Åó„ÅèË®àÁÆó„Åï„Çå„Çã', () => {
            const position = screenshotOverlay.calculatePosition('center', 100, 50, 800, 600, 0);
            expect(position.x).toBe(350); // (800 - 100) / 2
            expect(position.y).toBe(275); // (600 - 50) / 2
        });

        test('„Ç´„Çπ„Çø„É†Â∫ßÊ®ô„ÅåÊ≠£„Åó„ÅèÈÅ©Áî®„Åï„Çå„Çã', () => {
            const customPos = { x: 123, y: 456 };
            const position = screenshotOverlay.calculatePosition(customPos, 100, 50, 800, 600, 20);
            expect(position.x).toBe(123);
            expect(position.y).toBe(456);
        });

        test('Ë≤†„ÅÆÂ∫ßÊ®ô„Åå0„Å´Ë™øÊï¥„Åï„Çå„Çã', () => {
            const position = screenshotOverlay.calculatePosition('top-left', 100, 50, 800, 600, -10);
            expect(position.x).toBe(0);
            expect(position.y).toBe(0);
        });
    });

    describe('„ÉÜ„Ç≠„Çπ„ÉàÂá¶ÁêÜ', () => {
        test('„ÉÜ„Ç≠„Çπ„Éà„ÅåÊ≠£„Åó„ÅèÊäò„ÇäËøî„Åï„Çå„Çã', () => {
            (mockContext.measureText as jest.Mock<{ width: number }>)
                .mockReturnValueOnce({ width: 80 })  // "Lorem ipsum"
                .mockReturnValueOnce({ width: 120 }) // "Lorem ipsum dolor"
                .mockReturnValueOnce({ width: 60 })  // "dolor"
                .mockReturnValueOnce({ width: 90 })  // "dolor sit"
                .mockReturnValueOnce({ width: 40 }); // "sit"

            const wrapped = screenshotOverlay.wrapText(mockContext, 'Lorem ipsum dolor sit', 100);
            expect(wrapped).toEqual(['Lorem ipsum', 'dolor', 'sit']);
        });

        test('Áü≠„ÅÑ„ÉÜ„Ç≠„Çπ„Éà„ÅØÊäò„ÇäËøî„Åï„Çå„Å™„ÅÑ', () => {
            (mockContext.measureText as jest.Mock<{ width: number }>).mockReturnValue({ width: 50 });
            const wrapped = screenshotOverlay.wrapText(mockContext, 'Short text', 100);
            expect(wrapped).toEqual(['Short text']);
        });

        test('Êï∞ÂÄ§„ÅåÊ≠£„Åó„Åè„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åï„Çå„Çã', () => {
            expect(screenshotOverlay.formatNumber(1000)).toBe('1,000');
            expect(screenshotOverlay.formatNumber(1234567)).toBe('1,234,567');
        });
    });

    describe('„É¨„Çπ„Éù„É≥„Ç∑„ÉñÊ©üËÉΩ', () => {
        test('„É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫„Åß„Éï„Ç©„É≥„Éà„ÅåË™øÊï¥„Åï„Çå„Çã', () => {
            const responsiveConfig = screenshotOverlay.getResponsiveConfig(400, 300); // „É¢„Éê„Ç§„É´„Çµ„Ç§„Ç∫
            
            expect(responsiveConfig.score.fontSize).toBeLessThan(screenshotOverlay.config.score.fontSize);
            expect(responsiveConfig.logo.fontSize).toBeLessThan(screenshotOverlay.config.logo.fontSize);
        });

        test('„Éù„Éº„Éà„É¨„Éº„Éà„É¢„Éº„Éâ„Åß‰ΩçÁΩÆ„ÅåË™øÊï¥„Åï„Çå„Çã', () => {
            const responsiveConfig = screenshotOverlay.getResponsiveConfig(400, 800); // „Éù„Éº„Éà„É¨„Éº„Éà
            expect(responsiveConfig.layout.scorePosition).toBe('top-center');
            expect(responsiveConfig.layout.logoPosition).toBe('bottom-center');
        });

        test('„É©„É≥„Éâ„Çπ„Ç±„Éº„Éó„É¢„Éº„Éâ„Åß„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„ÅåÁ∂≠ÊåÅ„Åï„Çå„Çã', () => {
            const responsiveConfig = screenshotOverlay.getResponsiveConfig(800, 400); // „É©„É≥„Éâ„Çπ„Ç±„Éº„Éó
            expect(responsiveConfig.layout.scorePosition).toBe(screenshotOverlay.config.layout.scorePosition);
        });
    });

    describe('„Éó„É™„Çª„ÉÉ„ÉàË®≠ÂÆö', () => {
        test('minimal„Éó„É™„Çª„ÉÉ„Éà„ÅåÊ≠£„Åó„ÅèÂèñÂæó„Åï„Çå„Çã', () => {
            const preset = screenshotOverlay.getPresetConfig('minimal');
            expect(preset.logo?.enabled).toBe(false);
            expect(preset.watermark?.enabled).toBe(false);
            expect(preset.score?.borderWidth).toBe(0);
        });

        test('elegant„Éó„É™„Çª„ÉÉ„Éà„ÅåÊ≠£„Åó„ÅèÂèñÂæó„Åï„Çå„Çã', () => {
            const preset = screenshotOverlay.getPresetConfig('elegant');
            expect(preset.score?.backgroundColor).toBe('rgba(50, 50, 70, 0.9)');
            expect(preset.logo?.textColor).toBe('#FF8C69');
        });

        test('gaming„Éó„É™„Çª„ÉÉ„Éà„ÅåÊ≠£„Åó„ÅèÂèñÂæó„Åï„Çå„Çã', () => {
            const preset = screenshotOverlay.getPresetConfig('gaming');
            expect(preset.score?.backgroundColor).toBe('rgba(0, 255, 0, 0.8)');
            expect(preset.score?.fontSize).toBe(28);
        });

        test('Â≠òÂú®„Åó„Å™„ÅÑ„Éó„É™„Çª„ÉÉ„Éà„ÅßÁ©∫„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„ÅåËøî„Åï„Çå„Çã', () => {
            const preset = screenshotOverlay.getPresetConfig('nonexistent');
            expect(preset).toEqual({});
        });
    });

    describe('Ë®≠ÂÆöÁÆ°ÁêÜ', () => {
        test('Ë®≠ÂÆö„ÅåÊ≠£„Åó„ÅèÊõ¥Êñ∞„Åï„Çå„Çã', () => {
            const newConfig = {
                score: { fontSize: 30 },
                logo: { textColor: '#123456' }
            };
            screenshotOverlay.updateConfig(newConfig);

            expect(screenshotOverlay.config.score.fontSize).toBe(30);
            expect(screenshotOverlay.config.logo.textColor).toBe('#123456');
            // ‰ªñ„ÅÆË®≠ÂÆö„ÅØ‰øùÊåÅ„Åï„Çå„Çã
            expect(screenshotOverlay.config.score.enabled).toBe(true);
        });

        test('Ê∑±„ÅÑ„Éû„Éº„Ç∏„ÅåÊ≠£„Åó„ÅèÂãï‰Ωú„Åô„Çã', () => {
            const newConfig = {
                layout: { padding: 30 }
            };
            screenshotOverlay.updateConfig(newConfig);
            expect(screenshotOverlay.config.layout.padding).toBe(30);
            // ‰ªñ„ÅÆlayoutË®≠ÂÆö„ÅØ‰øùÊåÅ„Åï„Çå„Çã
            expect(screenshotOverlay.config.layout.scorePosition).toBe('top-right');
        });
    });

    describe('„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', () => {
        test('„Çπ„Ç≥„Ç¢„Éá„Éº„Çø„Å™„Åó„Åß„Ç®„É©„Éº„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
            await expect(screenshotOverlay.createScoreOverlay(mockCanvas, null))
                .rejects.toThrow();
            const stats = screenshotOverlay.getStats();
            expect(stats.errors).toBe(1);
        });

        test('ÂÆüÁ∏æ„Éá„Éº„Çø„Å™„Åó„Åß„Ç®„É©„Éº„ÅåÈÅ©Âàá„Å´Âá¶ÁêÜ„Åï„Çå„Çã', async () => {
            await expect(screenshotOverlay.createAchievementOverlay(mockCanvas, null))
                .rejects.toThrow();
            const stats = screenshotOverlay.getStats();
            expect(stats.errors).toBe(1);
        });

        test('Canvas„Ç®„É©„ÉºÊôÇ„ÅÆÂá¶ÁêÜ', async () => {
            mockContext.drawImage = jest.fn(() => {
                throw new Error('Canvas error');
            });

            await expect(screenshotOverlay.createScoreOverlay(mockCanvas, { score: 1000 }))
                .rejects.toThrow('Canvas error');
        });
    });

    describe('„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ', () => {
        test('„Ç≠„É£„ÉÉ„Ç∑„É•„Åå„ÇØ„É™„Ç¢„Åï„Çå„Çã', () => {
            screenshotOverlay.cache.fonts.set('test', 'value');
            screenshotOverlay.cache.images.set('test', 'value');
            screenshotOverlay.clearCache();
            expect(screenshotOverlay.cache.fonts.size).toBe(0);
            expect(screenshotOverlay.cache.images.size).toBe(0);
        });

        test('Áµ±Ë®à„ÅåÊ≠£„Åó„ÅèË®àÁÆó„Åï„Çå„Çã', async () => {
            await screenshotOverlay.createScoreOverlay(mockCanvas, { score: 1000 });
            await screenshotOverlay.createScoreOverlay(mockCanvas, { score: 2000 });
            const stats = screenshotOverlay.getStats();
            expect(stats.overlaysCreated).toBe(2);
            expect(stats.successRate).toBe(100);
            expect(stats.averageTimeMs).toBeGreaterThan(0);
        });
    });
});