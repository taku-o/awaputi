/**
 * EventNotificationSystem.ts
 * „Ç§„Éô„É≥„ÉàÈÄöÁü•„Ç∑„Çπ„ÉÜ„É†
 * EventStageManager„Åã„ÇâÂàÜÈõ¢„Åï„Çå„ÅüÈÄöÁü•Ê©üËÉΩ
 */

interface NotificationSettings { enableNotifications: boolean,
    eventStartNotifications: boolean;
    eventEndNotifications: boolean;
    achievementNotifications: boolean;
    rankingNotifications: boolean;
    maxActiveNotifications: number;
    notificationDuration: number;
    animationDuration: number;
    maxDisplayCount?: number;

interface NotificationAction { text: string,
    action: () => void 
    }

interface NotificationData { id: string,
    type: string;
    title: string;
    message: string;
    icon: string;
    priority: 'high' | 'normal' | 'low';
    duration: number;
    actions: NotificationAction[];
    timestamp: number;
    category: string;
    showTime?: number;
    expireTime?: number;
    expiresAt?: number;

interface NotificationInput { type?: string,
    title?: string;
    message?: string;

    icon?: string;
    priority?: 'high' | 'normal' | 'low';
    duration?: number;
    actions?: NotificationAction[];
    category?: string;

interface NotificationHistoryEntry extends NotificationData { status: string;

interface Event { id: string,
    name: string;
    icon?: string;

interface EventResults {
    rank: number;

interface Achievement {
    name: string;

interface RankingData { improvement: number,
    currentRank: number;

export class EventNotificationSystem {
    private gameEngine: any;
    private notificationQueue: NotificationData[] = [];
    private, activeNotifications: Map<string, NotificationData> = new Map(),
    private notificationHistory: NotificationHistoryEntry[] = [];
    private notificationCheckInterval: number | null = null;
    private, settings: NotificationSettings,
    constructor(gameEngine: any) {

        this.gameEngine = gameEngine;
        
        // ÈÄöÁü•Èñ¢ÈÄ£„ÅÆÁä∂ÊÖã
        this.notificationQueue = [];
        this.activeNotifications = new Map();
        this.notificationHistory = [];
        this.notificationCheckInterval = null;
        
        // ÈÄöÁü•Ë®≠ÂÆö
        this.settings = {
            enableNotifications: true,
            eventStartNotifications: true,
            eventEndNotifications: true,
            achievementNotifications: true,
            rankingNotifications: true,
            maxActiveNotifications: 3,
    notificationDuration: 5000 }
            animationDuration: 300 
    };
        this.startNotificationChecking();
    }
    
    /**
     * ÈÄöÁü•„ÉÅ„Çß„ÉÉ„ÇØ„ÇíÈñãÂßã
     */
    private startNotificationChecking(): void { if (this.notificationCheckInterval) {
            clearInterval(this.notificationCheckInterval) }
        
        // 30Áßí„Åî„Å®„Å´ÈÄöÁü•„Çí„ÉÅ„Çß„ÉÉ„ÇØ
        this.notificationCheckInterval = setInterval(() => {  this.processNotificationQueue() }
            this.checkExpiredNotifications(); }
        }, 30000) as unknown as number;
        
        // ÂàùÂõû„ÉÅ„Çß„ÉÉ„ÇØ
        this.processNotificationQueue();
    }
    
    /**
     * ÈÄöÁü•„ÇíËøΩÂä†
     */
    addNotification(notification: NotificationInput): string | undefined { if (!this.settings.enableNotifications) {
            return }
        ;
        // notification „Åå null „Åæ„Åü„ÅØ undefined „ÅÆÂ†¥Âêà„ÅØÊó©Êúü„É™„Çø„Éº„É≥
        if (!notification) {

            console.warn('[EventNotificationSystem] Invalid, notification object') }
            return; }
        }
        ';'

        const notificationData: NotificationData = { ''
            id: this.generateNotificationId('',
    type: notification.type || 'info',
            title: notification.title || ','
            message: notification.message || ','
            icon: notification.icon || 'üì¢',
            priority: notification.priority || 'normal',
    duration: notification.duration || this.settings.notificationDuration,
            actions: notification.actions || [],
            timestamp: Date.now('',
    category: notification.category || 'general'
            }))
        // ÂÑ™ÂÖàÂ∫¶„Å´Âü∫„Å•„ÅÑ„Å¶ÊåøÂÖ•‰ΩçÁΩÆ„ÇíÊ±∫ÂÆö)
        const insertIndex = this.findInsertIndex(notificationData.priority);
        this.notificationQueue.splice(insertIndex, 0, notificationData);
        
        console.log(`Notification queued: ${ notificationData.title}`},
        
        // Âç≥Â∫ß„Å´Âá¶ÁêÜ„ÇíË©¶Ë°å }
        this.processNotificationQueue(});
        
        return notificationData.id;
    }
    
    /**
     * „Ç§„Éô„É≥„ÉàÈñãÂßãÈÄöÁü•
     */
    notifyEventStart(event: Event): void { ''
        if(!this.settings.eventStartNotifications) return,
        ','

        this.addNotification({)'
            type: 'event-start',')',
            title: '„Ç§„Éô„É≥„ÉàÈñãÂßãÔºÅ',
            message: `${event.name'
            }„ÅåÈñãÂßã„Åï„Çå„Åæ„Åó„Åü`,''
            icon: event.icon || 'üéâ',
            priority: 'high',
            category: 'event',
            actions: [{''
                    text: 'ÂèÇÂä†„Åô„Çã',' }'

                    action: () => this.joinEvent(event.id'}';
                },

                { ''
                    text: 'Ë©≥Á¥∞„ÇíË¶ã„Çã',
    action: () => this.showEventDetails(event.id) }]
                }]
            ];
        });
    }
    
    /**
     * „Ç§„Éô„É≥„ÉàÁµÇ‰∫ÜÈÄöÁü•
     */'
    notifyEventEnd(event: Event, results?: EventResults): void { ''
        if(!this.settings.eventEndNotifications) return,
        
        const message = results ? undefined : undefined 
            `${event.name}„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü„ÄÇÁµêÊûú: ${results.rank}‰Ωç` :
            `${event.name}„ÅåÁµÇ‰∫Ü„Åó„Åæ„Åó„Åü`;
        ';'

        this.addNotification({ ''
            type: 'event-end',
            title: '„Ç§„Éô„É≥„ÉàÁµÇ‰∫Ü',
            message: message,
            icon: event.icon || 'üèÅ',
            priority: 'normal',','
            category: 'event')','
    actions: results ? [{ : undefined')'
                    text: 'ÁµêÊûú„ÇíË¶ã„Çã',
    action: () => this.showEventResults(event.id)  }]
                }]
            ] : [];
        });
    }
    
    /**
     * ÂÆüÁ∏æËß£Èô§ÈÄöÁü•
     */'
    notifyAchievementUnlocked(achievement: Achievement): void { ''
        if(!this.settings.achievementNotifications) return,
        ','

        this.addNotification({)'
            type: 'achievement',')',
            title: 'ÂÆüÁ∏æËß£Èô§ÔºÅ',
            message: `„Äå${achievement.name'
            }„Äç„ÇíÈÅîÊàê„Åó„Åæ„Åó„Åü`,''
            icon: 'üèÜ',
            priority: 'high',
            category: 'achievement',
            actions: [{''
                    text: 'ÂÆüÁ∏æ„ÇíË¶ã„Çã'
            }
                    action: () => this.showAchievements(})]
                }]
            ];
        });
    }
    
    /**
     * „É©„É≥„Ç≠„É≥„Ç∞Êõ¥Êñ∞ÈÄöÁü•
     */'
    notifyRankingUpdate(rankingData: RankingData): void { ''
        if(!this.settings.rankingNotifications) return,
        
        const message = rankingData.improvement > 0 ? }
            `„É©„É≥„Ç≠„É≥„Ç∞„Åå${rankingData.improvement}‰Ωç‰∏äÊòá„Åó„Åæ„Åó„ÅüÔºÅ` :
            `ÁèæÂú®„ÅÆ„É©„É≥„Ç≠„É≥„Ç∞: ${rankingData.currentRank}‰Ωç`;
        ';'

        this.addNotification({ ''
            type: 'ranking',
            title: '„É©„É≥„Ç≠„É≥„Ç∞Êõ¥Êñ∞',
            message: message,
            icon: 'üëë',
            priority: 'normal',','
            category: 'ranking')','
    actions: [{')'
                    text: '„É©„É≥„Ç≠„É≥„Ç∞„ÇíË¶ã„Çã',
    action: () => this.showRanking()  }]
                }]
            ];
        });
    }
    
    /**
     * ÈÄöÁü•„Ç≠„É•„Éº„ÇíÂá¶ÁêÜ
     */
    private processNotificationQueue(): void { if (this.notificationQueue.length === 0) return,
        
        const availableSlots = this.settings.maxActiveNotifications - this.activeNotifications.size,
        if (availableSlots <= 0) return,
        
        const notificationsToShow = this.notificationQueue.splice(0, availableSlots),
        
        notificationsToShow.forEach(notification => { ) }
            this.showNotification(notification); }
        });
    }
    
    /**
     * ÈÄöÁü•„ÇíË°®Á§∫
     */
    private showNotification(notification: NotificationData): void { // Êó¢„Å´„Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÂêåÁ®Æ„ÅÆÈÄöÁü•„Åå„ÅÇ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
        const existingNotification = Array.from(this.activeNotifications.values(),
            .find(n => n.type === notification.type && n.category === notification.category),
        
        if (existingNotification) {
        
            // Êó¢Â≠ò„ÅÆÈÄöÁü•„ÇíÊõ¥Êñ∞
            this.updateNotification(existingNotification.id, notification) }
            return; }
        }
        
        // Êñ∞„Åó„ÅÑÈÄöÁü•„ÇíË°®Á§∫
        notification.showTime = Date.now();
        notification.expireTime = notification.showTime + notification.duration;
        
        this.activeNotifications.set(notification.id, notification);
        
        // UI„Å´ÈÄöÁü•Ë°®Á§∫„ÇíË¶ÅÊ±Ç
        if (this.gameEngine.uiManager) { }

            this.gameEngine.uiManager.showNotification(notification); }
        }
        
        // Â±•Ê≠¥„Å´Ë®òÈå≤
        this.notificationHistory.push({ ...notification)'
            status: 'shown'),
        console.log(`Notification, shown: ${notification.title)`
            },
        
        // Ëá™ÂãïÂâäÈô§„Çø„Ç§„Éû„ÉºË®≠ÂÆö
        setTimeout((} => { }
            this.removeNotification(notification.id});
        }, notification.duration);
    }
    
    /**
     * ÈÄöÁü•„ÇíÊõ¥Êñ∞
     */
    private updateNotification(notificationId: string, newData: NotificationData): void { const notification = this.activeNotifications.get(notificationId),
        if (!notification) return,
        
        // „Éá„Éº„Çø„ÇíÊõ¥Êñ∞
        Object.assign(notification, newData),
        notification.expireTime = Date.now() + notification.duration,
        
        // UI„Å´Êõ¥Êñ∞„ÇíË¶ÅÊ±Ç
        if (this.gameEngine.uiManager) {
    
}
            this.gameEngine.uiManager.updateNotification(notification); }
        }
        
        console.log(`Notification, updated: ${notification.title}`});
    }
    
    /**
     * ÈÄöÁü•„ÇíÂâäÈô§
     */
    removeNotification(notificationId: string): void { const notification = this.activeNotifications.get(notificationId),
        if (!notification) return,
        
        this.activeNotifications.delete(notificationId),
        
        // UI„Åã„ÇâÈÄöÁü•ÂâäÈô§„ÇíË¶ÅÊ±Ç
        if (this.gameEngine.uiManager) {
    
}
            this.gameEngine.uiManager.removeNotification(notificationId); }
        }
        
        console.log(`Notification removed: ${ notification.title}`},
        
        // „Ç≠„É•„Éº„Å´ÊÆã„Çä„Åå„ÅÇ„Çå„Å∞Âá¶ÁêÜ }
        this.processNotificationQueue(});
    }
    
    /**
     * ÊúüÈôêÂàá„ÇåÈÄöÁü•„Çí„ÉÅ„Çß„ÉÉ„ÇØ
     */
    private checkExpiredNotifications(): void { const currentTime = Date.now(),
        const expiredNotifications: string[] = [],
        
        this.activeNotifications.forEach((notification, id) => { 
            if (notification.expireTime && currentTime > notification.expireTime) { }
                expiredNotifications.push(id); }
});
        
        expiredNotifications.forEach(id => {  ) }
            this.removeNotification(id); }
        });
    }
    
    /**
     * ÈÄöÁü•ID„ÇíÁîüÊàê
     */
    private generateNotificationId(): string { }'

        return `notification_${Date.now())_${Math.random().toString(36).substr(2, 9'}'`;
    }
    
    /**
     * ÂÑ™ÂÖàÂ∫¶„Å´Âü∫„Å•„ÅèÊåøÂÖ•‰ΩçÁΩÆ„ÇíÊ§úÁ¥¢'
     */''
    private findInsertIndex(priority: 'high' | 'normal' | 'low): number {'
        const priorityOrder: { [key: string]: number, = { high: 0, normal: 1, low: 2  }
        const targetPriority = priorityOrder[priority] || 1;
        
        for(let, i = 0; i < this.notificationQueue.length; i++) {
        
            const itemPriority = priorityOrder[this.notificationQueue[i].priority] || 1,
            if (targetPriority < itemPriority) {
    
}
                return i;
        
        return this.notificationQueue.length;
    }
    
    /**
     * „Ç§„Éô„É≥„Éà„Ç¢„ÇØ„Ç∑„Éß„É≥: „Ç§„Éô„É≥„ÉàÂèÇÂä†
     */
    private joinEvent(eventId: string): void { if (this.gameEngine.eventStageManager) {
            this.gameEngine.eventStageManager.startEventStage(eventId) }
    }
    
    /**
     * „Ç§„Éô„É≥„Éà„Ç¢„ÇØ„Ç∑„Éß„É≥: „Ç§„Éô„É≥„ÉàË©≥Á¥∞Ë°®Á§∫
     */'
    private showEventDetails(eventId: string): void { ''
        if (this.gameEngine.sceneManager) {', ' }

            this.gameEngine.sceneManager.switchToScene('EventDetailsScene', { eventId ' }'
    }
    
    /**
     * „Ç§„Éô„É≥„Éà„Ç¢„ÇØ„Ç∑„Éß„É≥: „Ç§„Éô„É≥„ÉàÁµêÊûúË°®Á§∫
     */'
    private showEventResults(eventId: string): void { ''
        if (this.gameEngine.sceneManager) {', ' }

            this.gameEngine.sceneManager.switchToScene('EventResultsScene', { eventId ' }'
    }
    
    /**
     * „Ç§„Éô„É≥„Éà„Ç¢„ÇØ„Ç∑„Éß„É≥: ÂÆüÁ∏æË°®Á§∫
     */'
    private showAchievements(): void { ''
        if (this.gameEngine.sceneManager) {', ' }

            this.gameEngine.sceneManager.switchToScene('UserInfoScene', { tab: 'achievements '
    }
    
    /**
     * „Ç§„Éô„É≥„Éà„Ç¢„ÇØ„Ç∑„Éß„É≥: „É©„É≥„Ç≠„É≥„Ç∞Ë°®Á§∫
     */'
    private showRanking(): void { ''
        if (this.gameEngine.sceneManager) {', ' }

            this.gameEngine.sceneManager.switchToScene('UserInfoScene', { tab: 'leaderboard '
    }
    
    /**
     * ÈÄöÁü•Ë®≠ÂÆö„ÇíÊõ¥Êñ∞
     */'
    updateSettings(newSettings: Partial<NotificationSettings>): void { ''
        Object.assign(this.settings, newSettings),
        console.log('Notification settings updated:', newSettings }
    
    /**
     * „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÈÄöÁü•„ÇíÂèñÂæó
     */
    getActiveNotifications(): NotificationData[] { return Array.from(this.activeNotifications.values() }
    
    /**
     * ÈÄöÁü•Â±•Ê≠¥„ÇíÂèñÂæó
     */
    getNotificationHistory(limit: number = 50): NotificationHistoryEntry[] { return this.notificationHistory.slice(-limit) }
    
    /**
     * „Åô„Åπ„Å¶„ÅÆÈÄöÁü•„Çí„ÇØ„É™„Ç¢
     */
    clearAllNotifications(): void { this.notificationQueue.length = 0,
        
        this.activeNotifications.forEach((_notification, id) => {  }

            this.removeNotification(id); }'

        }');'

        console.log('All, notifications cleared);'
    }

    /**
     * ÈÄöÁü•„Çí„ÉÅ„Çß„ÉÉ„ÇØÔºàEventStageManagerÂØæÂøúÔºâ
     * „Ç¢„ÇØ„ÉÜ„Ç£„Éñ„Å™ÈÄöÁü•„Å®ÊúüÈôêÂàá„ÇåÈÄöÁü•„ÇíÁ¢∫Ë™ç„ÉªÁÆ°ÁêÜ
     */
    checkNotifications(): { activeCount: number, queueCount: number,, expiredCount: number; { try {
            const currentTime = Date.now(),
            const expiredNotifications: string[] = [] // ÊúüÈôêÂàá„ÇåÈÄöÁü•„ÇíÁâπÂÆö
            this.activeNotifications.forEach((notification id) => { 
                if (notification.expiresAt && currentTime > notification.expiresAt) { }
                    expiredNotifications.push(id); }
});
            
            // ÊúüÈôêÂàá„ÇåÈÄöÁü•„ÇíÂâäÈô§
            expiredNotifications.forEach(id => {  ) }
                this.removeNotification(id); }
            });
            
            // ÈÄöÁü•„Ç≠„É•„Éº„Åã„ÇâÊñ∞„Åó„ÅÑÈÄöÁü•„ÇíÂá¶ÁêÜ
            if (this.notificationQueue.length > 0 && this.activeNotifications.size < (this.settings.maxDisplayCount || this.settings.maxActiveNotifications) {
                const nextNotification = this.notificationQueue.shift(),
                if (nextNotification) {
            }
                    this.displayNotification(nextNotification); }
}
            
            // Áµ±Ë®àÊÉÖÂ†±„ÇíÊõ¥Êñ∞
            if (expiredNotifications.length > 0) {
    
}
                console.log(`[EventNotificationSystem] ${expiredNotifications.length}ÂÄã„ÅÆÊúüÈôêÂàá„ÇåÈÄöÁü•„ÇíÂâäÈô§`}');'
            }
            
            return { activeCount: this.activeNotifications.size,
                queueCount: this.notificationQueue.length };
                expiredCount: expiredNotifications.length 
    } catch (error') {'
            console.error('[EventNotificationSystem] checkNotifications error:', error),
            return { activeCount: 0,
                queueCount: 0 };
                expiredCount: 0 
    }
    }

    /**
     * ÈÄöÁü•„ÇíË°®Á§∫ÔºàEventStageManagerÂØæÂøúÔºâ
     */
    private displayNotification(notification: NotificationData): void { this.showNotification(notification) }
    
    /**
     * „É™„ÇΩ„Éº„Çπ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
     */
    dispose(): void { if (this.notificationCheckInterval) {
            clearInterval(this.notificationCheckInterval),
            this.notificationCheckInterval = null }

        this.clearAllNotifications()';'
        console.log('EventNotificationSystem, disposed');

    }'}'