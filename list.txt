src/ui/FloatingTextManager.ts:    private updateAnimations(text: FloatingText, __deltaTime: number): void {
src/ui/AchievementHelpSystem.ts:    private __sectionSpacing: number;
src/ui/AchievementHelpSystem.ts:        this.__sectionSpacing = 40;
src/scenes/SettingsScene.ts:    update(__deltaTime: number): void {
src/scenes/SettingsScene.ts:    renderCategories(context: CanvasRenderingContext2D, __height: number): void {
src/scenes/SettingsScene.ts:    renderSettings(context: CanvasRenderingContext2D, width: number, __height: number): void {
src/scenes/SettingsScene.ts:        const __height = 30;
src/scenes/SettingsScene.ts:    renderAccessibilityProfileControl(context: CanvasRenderingContext2D, __value: any, x: number, y: number, width: number, isSelected: boolean): void {
src/scenes/SettingsScene.ts:    renderSettingsImportExportControl(context: CanvasRenderingContext2D, __value: any, x: number, y: number, width: number, isSelected: boolean): void {
src/scenes/SettingsScene.ts:        const __profileNames = profiles.map(p => p.name);
src/scenes/MainMenuScene.ts:    update(__deltaTime: number): void {
src/scenes/help-scene/HelpContentManager.ts:    recordTopicFeedback(__topicId: string, feedback: any) {
src/scenes/HelpScene.ts:    update(__deltaTime: number): void {
src/types/test.d.ts:    __getEvents(): string[];
src/types/test.d.ts:    __getDrawCalls(): any[];
src/types/test.d.ts:    __clear(): void;
src/types/test.d.ts:    __clear(): void;
src/types/test.d.ts:    __getStore(): { [key: string]: string };
src/types/test.d.ts:    __setStore(store: { [key: string]: string }): void;
src/types/global.d.ts:  const __DEV__: boolean;
src/types/global.d.ts:  const __PROD__: boolean;
src/types/global.d.ts:  const __VERSION__: string;
src/types/global.d.ts:  const __BUILD_TIME__: string;
src/types/global.d.ts:  const __ANALYTICS_ID__: string;
src/types/global.d.ts:  const __SENTRY_DSN__: string;
src/core/StatisticsManager.ts:    private __gameEngine: GameEngine; // prefixed with __ as unused
src/core/StatisticsManager.ts:        this.__gameEngine = gameEngine;
src/core/CoreTrendAnalyzer.js:            .sort(([_, a], [__, b]) => b.correlation - a.correlation);
src/core/game-engine/GameEngineInitializer.ts:    private __setupSEOIntegration(): void {
src/core/CalculationEngine.ts:    private __initialized: boolean;
src/core/CalculationEngine.ts:        this.__initialized = false;
src/core/CalculationEngine.ts:        this.__initialized = true;
src/core/CalculationEngine.ts:        return this.__initialized;
src/core/CalculationEngine.ts:        this.__initialized = false;
src/core/i18n/I18nSecurityManager.js:            '__proto__', 'constructor', 'prototype',
src/core/i18n/I18nSecurityTester.js:                '{{__proto__.constructor.constructor("alert(1)")()}}',
src/core/i18n/I18nSecurityTester.js:                '__import__("os")',
src/core/i18n/I18nSecurityTester.js:            '__proto__', 'constructor', 'prototype',
src/core/i18n/I18nSecurityTester.js:            'test.proto': { '__proto__': { polluted: true } }
src/core/i18n/management/TranslationKeyManager.js:        const reservedWords = ['constructor', 'prototype', '__proto__', 'toString', 'valueOf'];
src/core/i18n/CompressionUtils.js:                const placeholder = `__R${replacementIndex}__`;
src/core/ConfigurationManager.ts:    private __lazyLoaders!: Map<string, () => ConfigurationValue>;
src/core/ConfigurationManager.ts:    private __preloadKeys!: Set<string>;
src/core/ConfigurationManager.ts:        this.__lazyLoaders = new Map<string, () => ConfigurationValue>();
src/core/ConfigurationManager.ts:        this.__preloadKeys = new Set([
src/core/SceneManager.ts:    private __gameEngine: any; // GameEngine type would be defined elsewhere - prefixed with __ as unused
src/core/SceneManager.ts:    private __nextScene: ExtendedScene | null; // prefixed with __ as unused
src/core/SceneManager.ts:        this.__gameEngine = gameEngine;
src/core/SceneManager.ts:        this.__nextScene = null;
src/core/SceneManager.ts:        this.__nextScene = null;
src/managers/bubble-manager/BubblePhysicsEngine.ts:        const __direction = {
src/managers/bubble-manager/BubbleDragSystem.ts:    private __dragStartPosition: Position = { x: 0, y: 0 };
src/managers/bubble-manager/BubbleDragSystem.ts:    private __dragCurrentPosition: Position = { x: 0, y: 0 };
src/managers/bubble-manager/BubbleDragSystem.ts:                this.__dragStartPosition = { x, y };
src/managers/bubble-manager/BubbleDragSystem.ts:                this.__dragCurrentPosition = { x, y };
src/managers/bubble-manager/BubbleDragSystem.ts:        this.__dragCurrentPosition = { x, y };
src/managers/bubble-manager/BubbleDragSystem.ts:        this.__dragStartPosition = { x: 0, y: 0 };
src/managers/bubble-manager/BubbleDragSystem.ts:        this.__dragCurrentPosition = { x: 0, y: 0 };
src/managers/bubble-manager/BubbleEffectProcessor.ts:        const __gameScene = this.gameEngine.sceneManager.getCurrentScene();
src/utils/PerformanceOptimizer.ts:    private __lastFrameTime!: number | null;
src/utils/PerformanceOptimizer.ts:    private __lastLoggedStabilizerZone!: string | null;
src/utils/PerformanceOptimizer.ts:            this.__lastFrameTime = null;
src/utils/PerformanceOptimizer.ts:            this.__lastLoggedStabilizerZone = null;
src/utils/PerformanceOptimizer.ts:            this.__lastFrameTime = frameTime;
src/utils/local-execution/LocalExecutionDetector.js:            const test = '__localStorage_test__';
src/utils/local-execution/BrowserCompatibilityManager.js:                const testRead = localStorage.getItem('__compatibility_test__');
src/utils/local-execution/BrowserCompatibilityManager.js:                localStorage.setItem('__compatibility_test__', 'test');
src/utils/local-execution/BrowserCompatibilityManager.js:                localStorage.removeItem('__compatibility_test__');
src/utils/local-execution/BrowserCompatibilityManager.js:                    localStorage.setItem(`__quota_test_${i}__`, testData);
src/utils/local-execution/BrowserCompatibilityManager.js:                    localStorage.removeItem(`__quota_test_${i}__`);
src/utils/Analytics.js:    this.isEnabled = __PROD__ && __ANALYTICS_ID__;
src/utils/Analytics.js:    if (__ANALYTICS_ID__ && typeof gtag !== 'undefined') {
src/utils/Analytics.js:      gtag('config', __ANALYTICS_ID__, {
src/utils/Analytics.js:      gtag('config', __ANALYTICS_ID__, {
src/utils/Analytics.js:        game_version: __VERSION__,
src/utils/Analytics.js:        build_time: __BUILD_TIME__
src/utils/Analytics.js:    if (__SENTRY_DSN__ && typeof Sentry !== 'undefined') {
src/utils/Analytics.js:        dsn: __SENTRY_DSN__,
src/utils/Analytics.js:        environment: __PROD__ ? 'production' : 'development',
src/utils/Analytics.js:        release: __VERSION__,
src/utils/Analytics.js:      Sentry.setTag('game.version', __VERSION__);
src/utils/Analytics.js:      game_version: __VERSION__,
src/utils/Analytics.js:    if (__DEV__) {
src/utils/MemoryManager.ts:    track(obj: object, type: string = 'unknown', __metadata: any = {}): void {
src/utils/MemoryManager.ts:    private updateAggregatedStats(__usageReport: any, leakReport: any, cleanupResult: any): void {
src/components/IMPLEMENTATION_SUMMARY.md:- **`/src/components/__tests__/SettingsImportExportComponent.test.js`**
src/components/IMPLEMENTATION_SUMMARY.md:├── __tests__/
src/components/README.md:npm test src/components/__tests__/VolumeControlComponent.test.js
src/components/README.md:npm test src/components/__tests__/SettingsImportExportComponent.test.js
src/effects/particles/ParticleRenderer.ts:    private __particleManager: any;
src/effects/particles/ParticleRenderer.ts:        this.__particleManager = particleManager;
src/analytics/AnalyticsErrorNotificationSystem.js:            const testKey = '__storage_test__';
src/debug/IntegrationTestSuite.js:            if (!(debugInterface instanceof debugInterface.constructor.__proto__.constructor)) {
