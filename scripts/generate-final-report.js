#!/usr/bin/env node

import { ReportGenerator } from '../src/utils/validation/ReportGenerator.js';
import { ValidationEngine } from '../src/utils/validation/ValidationEngine.js';
import { NamingConflictDetector } from '../src/utils/validation/NamingConflictDetector.js';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const projectRoot = path.resolve(__dirname, '..');

/**
 * Issue #131 JavaScript „ÇØ„É©„ÇπÂêçÈáçË§áËß£Ê±∫„Éó„É≠„Ç∏„Çß„ÇØ„Éà„ÅÆÊúÄÁµÇ„É¨„Éù„Éº„ÉàÁîüÊàê
 */
async function generateFinalReport() {
    console.log('üìä Generating comprehensive project report for Issue #131...');
    console.log(`Project root: ${projectRoot}`);
    console.log('='.repeat(60));
    
    try {
        // ReportGenerator„Åß„É°„Ç§„É≥„É¨„Éù„Éº„Éà„ÇíÁîüÊàê
        const reportGenerator = new ReportGenerator({
            projectRoot,
            includeStatistics: true,
            includeChangeLog: true,
            includeImpactAnalysis: true,
            includeRecommendations: true,
            outputFormat: 'both'
        });
        
        console.log('üîç Step 1: Generating comprehensive project report...');
        const comprehensiveReport = await reportGenerator.generateComprehensiveReport();
        
        // „É¨„Éù„Éº„Éà„Çí‰øùÂ≠ò
        console.log('üíæ Step 2: Saving reports to files...');
        const outputDir = path.join(projectRoot, 'reports');
        const savedReports = await reportGenerator.saveReport(comprehensiveReport, outputDir);
        
        // ÁèæÂú®„ÅÆÂëΩÂêçÁ´∂ÂêàÁä∂Ê≥Å„ÇíÁ¢∫Ë™ç
        console.log('üîç Step 3: Verifying current naming conflicts...');
        const conflictDetector = new NamingConflictDetector({
            projectRoot,
            warningLevel: 'strict'
        });
        
        const conflictReport = await conflictDetector.generateReport();
        
        // „Ç≥„Éº„ÉâÊ§úË®º„ÇíÂÆüË°å
        console.log('üîç Step 4: Running final code validation...');
        const validator = new ValidationEngine({
            projectRoot,
            validateSyntax: true,
            validateImports: true,
            validateExports: true,
            validateReferences: true
        });
        
        const validationTargets = [
            'src/core/',
            'src/debug/',
            'src/analytics/',
            'src/audio/',
            'src/scenes/',
            'src/ui/',
            'src/utils/',
            'src/utils/validation/'
        ];
        
        const validationReport = await validator.validateTargets(validationTargets);
        
        // ÊúÄÁµÇ„É¨„Éù„Éº„ÉàÁµêÊûú„ÇíË°®Á§∫
        console.log('\nüìã FINAL REPORT SUMMARY');
        console.log('='.repeat(60));
        
        console.log('\n‚úÖ Project Completion Status:');
        console.log(`   Tasks Completed: ${comprehensiveReport.summary.tasksCompleted}/${comprehensiveReport.summary.totalTasks}`);
        console.log(`   Completion Rate: ${comprehensiveReport.summary.completionPercentage}%`);
        console.log(`   Status: ${comprehensiveReport.summary.completionStatus}`);
        
        console.log('\nüìä Duplications Resolved:');
        console.log(`   Total Classes: ${comprehensiveReport.statistics.duplicationsResolved.totalClasses}`);
        console.log(`   Total Files: ${comprehensiveReport.statistics.duplicationsResolved.totalFiles}`);
        console.log(`   Files Renamed: ${comprehensiveReport.statistics.filesModified.renamed}`);
        console.log(`   Files Updated: ${comprehensiveReport.statistics.filesModified.updated}`);
        console.log(`   New Files Created: ${comprehensiveReport.statistics.filesModified.created}`);
        
        console.log('\nüéØ Naming Strategies Applied:');
        for (const [strategy, count] of Object.entries(comprehensiveReport.statistics.namingStrategies)) {
            console.log(`   ${strategy}: ${count} applications`);
        }
        
        console.log('\nüîç Current Conflict Status:');
        console.log(`   Duplicate Files: ${conflictReport.conflicts.files.length}`);
        console.log(`   Duplicate Classes: ${conflictReport.conflicts.classes.length}`);
        console.log(`   Duplicate Functions: ${conflictReport.conflicts.functions.length}`);
        
        console.log('\n‚úÖ Code Validation Results:');
        console.log(`   Total Files Validated: ${validationReport.summary.totalFiles}`);
        console.log(`   Success Rate: ${validationReport.summary.successRate}%`);
        console.log(`   Files with Errors: ${validationReport.summary.errorFiles}`);
        console.log(`   Files with Warnings: ${validationReport.summary.warningFiles}`);
        
        if (validationReport.summary.errorFiles > 0) {
            console.log('\n‚ùå Validation Errors Found:');
            validationReport.errors.slice(0, 5).forEach((error, index) => {
                console.log(`   ${index + 1}. ${path.relative(projectRoot, error.file)}: ${error.error}`);
            });
            if (validationReport.errors.length > 5) {
                console.log(`   ... and ${validationReport.errors.length - 5} more errors`);
            }
        }
        
        console.log('\nüìÅ Generated Reports:');
        for (const [format, filePath] of Object.entries(savedReports)) {
            console.log(`   ${format.toUpperCase()}: ${path.relative(projectRoot, filePath)}`);
        }
        
        // Êé®Â•®‰∫ãÈ†Ö„ÇíË°®Á§∫
        console.log('\nüí° Key Recommendations:');
        comprehensiveReport.recommendations.slice(0, 3).forEach((rec, index) => {
            const priority = rec.priority === 'High' ? 'üî¥' : rec.priority === 'Medium' ? 'üü°' : 'üü¢';
            console.log(`   ${index + 1}. ${priority} ${rec.recommendation}`);
            console.log(`      Implementation: ${rec.implementation}`);
        });
        
        // Â∞ÜÊù•„ÅÆÈò≤Ê≠¢Êé™ÁΩÆ
        console.log('\nüõ°Ô∏è  Future Prevention Measures:');
        console.log(`   - Automatic Validation: ${comprehensiveReport.futurePreventionMeasures.automaticValidation.description}`);
        console.log(`   - Development Guidelines: Domain-based, Function-level, Context-specific naming`);
        console.log(`   - Tool Integration: ValidationEngine, NamingConflictDetector in CI/CD`);
        
        // ÊúÄÁµÇÂà§ÂÆö
        console.log('\nüéâ PROJECT STATUS:');
        if (conflictReport.conflicts.files.length === 0 && 
            conflictReport.conflicts.classes.length === 0 && 
            validationReport.summary.errorFiles === 0) {
            console.log('   ‚úÖ SUCCESS: All major duplications resolved and validated!');
            console.log('   üìù Ready for final commit and PR creation.');
            process.exit(0);
        } else {
            console.log('   ‚ö†Ô∏è  MINOR ISSUES: Some items may need attention:');
            if (conflictReport.conflicts.files.length > 0) {
                console.log(`      - ${conflictReport.conflicts.files.length} file name conflicts remaining`);
            }
            if (conflictReport.conflicts.classes.length > 0) {
                console.log(`      - ${conflictReport.conflicts.classes.length} class name conflicts remaining`);
            }
            if (validationReport.summary.errorFiles > 0) {
                console.log(`      - ${validationReport.summary.errorFiles} files with validation errors`);
            }
            console.log('   üìù Review and address remaining issues before final commit.');
            process.exit(1);
        }
        
    } catch (error) {
        console.error('‚ùå Failed to generate final report:', error.message);
        console.error(error.stack);
        process.exit(1);
    }
}

// „Éò„É´„ÉóË°®Á§∫
if (process.argv.includes('--help') || process.argv.includes('-h')) {
    console.log(`
Usage: ${path.basename(process.argv[1])} [options]

Options:
  --help, -h    Show this help message

This script generates a comprehensive final report for Issue #131 (JavaScript Class Name Deduplication).
It combines data from ReportGenerator, ValidationEngine, and NamingConflictDetector to provide
a complete overview of the project completion status.

The script will:
1. Generate comprehensive project report
2. Save reports in JSON and Markdown formats
3. Verify current naming conflicts
4. Run final code validation
5. Display summary and recommendations
6. Exit with status code 0 if successful, 1 if issues remain
`);
    process.exit(0);
}

// „É°„Ç§„É≥ÂÆüË°å
generateFinalReport();